/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * User info
         * @description Returns authenticated user information
         */
        get: operations["getUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/budgets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List budgets
         * @description Returns budgets list with summary information
         */
        get: operations["getBudgets"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/budgets/{budget_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Single budget
         * @description Returns a single budget with all related entities.  This resource is effectively a full budget export.
         */
        get: operations["getBudgetById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/budgets/{budget_id}/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Budget Settings
         * @description Returns settings for a budget
         */
        get: operations["getBudgetSettingsById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/budgets/{budget_id}/accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Account list
         * @description Returns all accounts
         */
        get: operations["getAccounts"];
        put?: never;
        /**
         * Create a new account
         * @description Creates a new account
         */
        post: operations["createAccount"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/budgets/{budget_id}/accounts/{account_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Single account
         * @description Returns a single account
         */
        get: operations["getAccountById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/budgets/{budget_id}/categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List categories
         * @description Returns all categories grouped by category group.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
         */
        get: operations["getCategories"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/budgets/{budget_id}/categories/{category_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Single category
         * @description Returns a single category.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
         */
        get: operations["getCategoryById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update a category
         * @description Update a category
         */
        patch: operations["updateCategory"];
        trace?: never;
    };
    "/budgets/{budget_id}/months/{month}/categories/{category_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Single category for a specific budget month
         * @description Returns a single category for a specific budget month.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
         */
        get: operations["getMonthCategoryById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update a category for a specific month
         * @description Update a category for a specific month.  Only `budgeted` amount can be updated.
         */
        patch: operations["updateMonthCategory"];
        trace?: never;
    };
    "/budgets/{budget_id}/payees": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List payees
         * @description Returns all payees
         */
        get: operations["getPayees"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/budgets/{budget_id}/payees/{payee_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Single payee
         * @description Returns a single payee
         */
        get: operations["getPayeeById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update a payee
         * @description Update a payee
         */
        patch: operations["updatePayee"];
        trace?: never;
    };
    "/budgets/{budget_id}/payee_locations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List payee locations
         * @description Returns all payee locations
         */
        get: operations["getPayeeLocations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/budgets/{budget_id}/payee_locations/{payee_location_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Single payee location
         * @description Returns a single payee location
         */
        get: operations["getPayeeLocationById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/budgets/{budget_id}/payees/{payee_id}/payee_locations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List locations for a payee
         * @description Returns all payee locations for a specified payee
         */
        get: operations["getPayeeLocationsByPayee"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/budgets/{budget_id}/months": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List budget months
         * @description Returns all budget months
         */
        get: operations["getBudgetMonths"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/budgets/{budget_id}/months/{month}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Single budget month
         * @description Returns a single budget month
         */
        get: operations["getBudgetMonth"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/budgets/{budget_id}/transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List transactions
         * @description Returns budget transactions, excluding any pending transactions
         */
        get: operations["getTransactions"];
        put?: never;
        /**
         * Create a single transaction or multiple transactions
         * @description Creates a single transaction or multiple transactions.  If you provide a body containing a `transaction` object, a single transaction will be created and if you provide a body containing a `transactions` array, multiple transactions will be created.  Scheduled transactions (transactions with a future date) cannot be created on this endpoint.
         */
        post: operations["createTransaction"];
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update multiple transactions
         * @description Updates multiple transactions, by `id` or `import_id`.
         */
        patch: operations["updateTransactions"];
        trace?: never;
    };
    "/budgets/{budget_id}/transactions/import": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Import transactions
         * @description Imports available transactions on all linked accounts for the given budget.  Linked accounts allow transactions to be imported directly from a specified financial institution and this endpoint initiates that import.  Sending a request to this endpoint is the equivalent of clicking "Import" on each account in the web application or tapping the "New Transactions" banner in the mobile applications.  The response for this endpoint contains the transaction ids that have been imported.
         */
        post: operations["importTransactions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/budgets/{budget_id}/transactions/{transaction_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Single transaction
         * @description Returns a single transaction
         */
        get: operations["getTransactionById"];
        /**
         * Updates an existing transaction
         * @description Updates a single transaction
         */
        put: operations["updateTransaction"];
        post?: never;
        /**
         * Deletes an existing transaction
         * @description Deletes a transaction
         */
        delete: operations["deleteTransaction"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/budgets/{budget_id}/accounts/{account_id}/transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List account transactions
         * @description Returns all transactions for a specified account, excluding any pending transactions
         */
        get: operations["getTransactionsByAccount"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/budgets/{budget_id}/categories/{category_id}/transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List category transactions, excluding any pending transactions
         * @description Returns all transactions for a specified category
         */
        get: operations["getTransactionsByCategory"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/budgets/{budget_id}/payees/{payee_id}/transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List payee transactions, excluding any pending transactions
         * @description Returns all transactions for a specified payee
         */
        get: operations["getTransactionsByPayee"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/budgets/{budget_id}/months/{month}/transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List transactions in month, excluding any pending transactions
         * @description Returns all transactions for a specified month
         */
        get: operations["getTransactionsByMonth"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/budgets/{budget_id}/scheduled_transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List scheduled transactions
         * @description Returns all scheduled transactions
         */
        get: operations["getScheduledTransactions"];
        put?: never;
        /**
         * Create a single scheduled transaction
         * @description Creates a single scheduled transaction (a transaction with a future date).
         */
        post: operations["createScheduledTransaction"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/budgets/{budget_id}/scheduled_transactions/{scheduled_transaction_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Single scheduled transaction
         * @description Returns a single scheduled transaction
         */
        get: operations["getScheduledTransactionById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ErrorResponse: {
            error: components["schemas"]["ErrorDetail"];
        };
        ErrorDetail: {
            id: string;
            name: string;
            detail: string;
        };
        UserResponse: {
            data: {
                user: components["schemas"]["User"];
            };
        };
        User: {
            /** Format: uuid */
            id: string;
        };
        /** @description The date format setting for the budget.  In some cases the format will not be available and will be specified as null. */
        DateFormat: {
            format: string;
        } | null;
        /** @description The currency format setting for the budget.  In some cases the format will not be available and will be specified as null. */
        CurrencyFormat: {
            iso_code: string;
            example_format: string;
            /** Format: int32 */
            decimal_digits: number;
            decimal_separator: string;
            symbol_first: boolean;
            group_separator: string;
            currency_symbol: string;
            display_symbol: boolean;
        } | null;
        BudgetSummaryResponse: {
            data: {
                budgets: components["schemas"]["BudgetSummary"][];
                default_budget?: components["schemas"]["BudgetSummary"];
            };
        };
        BudgetSummary: {
            /** Format: uuid */
            id: string;
            name: string;
            /**
             * Format: date-time
             * @description The last time any changes were made to the budget from either a web or mobile client
             */
            last_modified_on?: string;
            /**
             * Format: date
             * @description The earliest budget month
             */
            first_month?: string;
            /**
             * Format: date
             * @description The latest budget month
             */
            last_month?: string;
            date_format?: components["schemas"]["DateFormat"];
            currency_format?: components["schemas"]["CurrencyFormat"];
            /** @description The budget accounts (only included if `include_accounts=true` specified as query parameter) */
            accounts?: components["schemas"]["Account"][];
        };
        BudgetDetailResponse: {
            data: {
                budget: components["schemas"]["BudgetDetail"];
                /**
                 * Format: int64
                 * @description The knowledge of the server
                 */
                server_knowledge: number;
            };
        };
        BudgetDetail: components["schemas"]["BudgetSummary"] & {
            accounts?: components["schemas"]["Account"][];
            payees?: components["schemas"]["Payee"][];
            payee_locations?: components["schemas"]["PayeeLocation"][];
            category_groups?: components["schemas"]["CategoryGroup"][];
            categories?: components["schemas"]["Category"][];
            months?: components["schemas"]["MonthDetail"][];
            transactions?: components["schemas"]["TransactionSummary"][];
            subtransactions?: components["schemas"]["SubTransaction"][];
            scheduled_transactions?: components["schemas"]["ScheduledTransactionSummary"][];
            scheduled_subtransactions?: components["schemas"]["ScheduledSubTransaction"][];
        };
        BudgetSettingsResponse: {
            data: {
                settings: components["schemas"]["BudgetSettings"];
            };
        };
        BudgetSettings: {
            date_format: components["schemas"]["DateFormat"];
            currency_format: components["schemas"]["CurrencyFormat"];
        };
        AccountsResponse: {
            data: {
                accounts: components["schemas"]["Account"][];
                /**
                 * Format: int64
                 * @description The knowledge of the server
                 */
                server_knowledge: number;
            };
        };
        AccountResponse: {
            data: {
                account: components["schemas"]["Account"];
            };
        };
        Account: {
            /** Format: uuid */
            id: string;
            name: string;
            type: components["schemas"]["AccountType"];
            /** @description Whether this account is on budget or not */
            on_budget: boolean;
            /** @description Whether this account is closed or not */
            closed: boolean;
            note?: string | null;
            /**
             * Format: int64
             * @description The current balance of the account in milliunits format
             */
            balance: number;
            /**
             * Format: int64
             * @description The current cleared balance of the account in milliunits format
             */
            cleared_balance: number;
            /**
             * Format: int64
             * @description The current uncleared balance of the account in milliunits format
             */
            uncleared_balance: number;
            /**
             * Format: uuid
             * @description The payee id which should be used when transferring to this account
             */
            transfer_payee_id: string | null;
            /** @description Whether or not the account is linked to a financial institution for automatic transaction import. */
            direct_import_linked?: boolean;
            /** @description If an account linked to a financial institution (direct_import_linked=true) and the linked connection is not in a healthy state, this will be true. */
            direct_import_in_error?: boolean;
            /**
             * Format: date-time
             * @description A date/time specifying when the account was last reconciled.
             */
            last_reconciled_at?: string | null;
            /**
             * Format: int64
             * @description The original debt/loan account balance, specified in milliunits format.
             */
            debt_original_balance?: number | null;
            debt_interest_rates?: components["schemas"]["LoanAccountPeriodicValue"];
            debt_minimum_payments?: components["schemas"]["LoanAccountPeriodicValue"];
            debt_escrow_amounts?: components["schemas"]["LoanAccountPeriodicValue"];
            /** @description Whether or not the account has been deleted.  Deleted accounts will only be included in delta requests. */
            deleted: boolean;
        };
        PostAccountWrapper: {
            account: components["schemas"]["SaveAccount"];
        };
        SaveAccount: {
            /** @description The name of the account */
            name: string;
            type: components["schemas"]["AccountType"];
            /**
             * Format: int64
             * @description The current balance of the account in milliunits format
             */
            balance: number;
        };
        LoanAccountPeriodicValue: {
            [key: string]: number;
        } | null;
        /**
         * @description The type of account
         * @enum {string}
         */
        AccountType: "checking" | "savings" | "cash" | "creditCard" | "lineOfCredit" | "otherAsset" | "otherLiability" | "mortgage" | "autoLoan" | "studentLoan" | "personalLoan" | "medicalDebt" | "otherDebt";
        CategoriesResponse: {
            data: {
                category_groups: components["schemas"]["CategoryGroupWithCategories"][];
                /**
                 * Format: int64
                 * @description The knowledge of the server
                 */
                server_knowledge: number;
            };
        };
        CategoryResponse: {
            data: {
                category: components["schemas"]["Category"];
            };
        };
        CategoryGroupWithCategories: components["schemas"]["CategoryGroup"] & {
            /** @description Category group categories.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC). */
            categories: components["schemas"]["Category"][];
        };
        CategoryGroup: {
            /** Format: uuid */
            id: string;
            name: string;
            /** @description Whether or not the category group is hidden */
            hidden: boolean;
            /** @description Whether or not the category group has been deleted.  Deleted category groups will only be included in delta requests. */
            deleted: boolean;
        };
        Category: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            category_group_id: string;
            category_group_name?: string;
            name: string;
            /** @description Whether or not the category is hidden */
            hidden: boolean;
            /**
             * Format: uuid
             * @description DEPRECATED: No longer used.  Value will always be null.
             */
            original_category_group_id?: string | null;
            note?: string | null;
            /**
             * Format: int64
             * @description Budgeted amount in milliunits format
             */
            budgeted: number;
            /**
             * Format: int64
             * @description Activity amount in milliunits format
             */
            activity: number;
            /**
             * Format: int64
             * @description Balance in milliunits format
             */
            balance: number;
            /**
             * @description The type of goal, if the category has a goal (TB='Target Category Balance', TBD='Target Category Balance by Date', MF='Monthly Funding', NEED='Plan Your Spending')
             * @enum {string|null}
             */
            goal_type?: "TB" | "TBD" | "MF" | "NEED" | "DEBT" | null;
            /**
             * @description Indicates the monthly rollover behavior for "NEED"-type goals. When "true", the goal will always ask for the target amount in the new month ("Set Aside"). When "false", previous month category funding is used ("Refill"). For other goal types, this field will be null.
             * @default null
             */
            goal_needs_whole_amount: boolean | null;
            /**
             * Format: int32
             * @description A day offset modifier for the goal's due date. When goal_cadence is 2 (Weekly), this value specifies which day of the week the goal is due (0 = Sunday, 6 = Saturday). Otherwise, this value specifies which day of the month the goal is due (1 = 1st, 31 = 31st, null = Last day of Month).
             */
            goal_day?: number | null;
            /**
             * Format: int32
             * @description The goal cadence. Value in range 0-14. There are two subsets of these values which behave differently. For values 0, 1, 2, and 13, the goal's due date repeats every goal_cadence * goal_cadence_frequency, where 0 = None, 1 = Monthly, 2 = Weekly, and 13 = Yearly. For example, goal_cadence 1 with goal_cadence_frequency 2 means the goal is due every other month. For values 3-12 and 14, goal_cadence_frequency is ignored and the goal's due date repeats every goal_cadence, where 3 = Every 2 Months, 4 = Every 3 Months, ..., 12 = Every 11 Months, and 14 = Every 2 Years.
             */
            goal_cadence?: number | null;
            /**
             * Format: int32
             * @description The goal cadence frequency. When goal_cadence is 0, 1, 2, or 13, a goal's due date repeats every goal_cadence * goal_cadence_frequency. For example, goal_cadence 1 with goal_cadence_frequency 2 means the goal is due every other month.  When goal_cadence is 3-12 or 14, goal_cadence_frequency is ignored.
             */
            goal_cadence_frequency?: number | null;
            /**
             * Format: date
             * @description The month a goal was created
             */
            goal_creation_month?: string | null;
            /**
             * Format: int64
             * @description The goal target amount in milliunits
             */
            goal_target?: number | null;
            /**
             * Format: date
             * @description The original target month for the goal to be completed.  Only some goal types specify this date.
             */
            goal_target_month?: string | null;
            /**
             * Format: int32
             * @description The percentage completion of the goal
             */
            goal_percentage_complete?: number | null;
            /**
             * Format: int32
             * @description The number of months, including the current month, left in the current goal period.
             */
            goal_months_to_budget?: number | null;
            /**
             * Format: int64
             * @description The amount of funding still needed in the current month to stay on track towards completing the goal within the current goal period. This amount will generally correspond to the 'Underfunded' amount in the web and mobile clients except when viewing a category with a Needed for Spending Goal in a future month.  The web and mobile clients will ignore any funding from a prior goal period when viewing category with a Needed for Spending Goal in a future month.
             */
            goal_under_funded?: number | null;
            /**
             * Format: int64
             * @description The total amount funded towards the goal within the current goal period.
             */
            goal_overall_funded?: number | null;
            /**
             * Format: int64
             * @description The amount of funding still needed to complete the goal within the current goal period.
             */
            goal_overall_left?: number | null;
            /** @description Whether or not the category has been deleted.  Deleted categories will only be included in delta requests. */
            deleted: boolean;
        };
        SaveCategoryResponse: {
            data: {
                category: components["schemas"]["Category"];
                /**
                 * Format: int64
                 * @description The knowledge of the server
                 */
                server_knowledge: number;
            };
        };
        PayeesResponse: {
            data: {
                payees: components["schemas"]["Payee"][];
                /**
                 * Format: int64
                 * @description The knowledge of the server
                 */
                server_knowledge: number;
            };
        };
        PayeeResponse: {
            data: {
                payee: components["schemas"]["Payee"];
            };
        };
        SavePayeeResponse: {
            data: {
                payee: components["schemas"]["Payee"];
                /**
                 * Format: int64
                 * @description The knowledge of the server
                 */
                server_knowledge: number;
            };
        };
        Payee: {
            /** Format: uuid */
            id: string;
            name: string;
            /** @description If a transfer payee, the `account_id` to which this payee transfers to */
            transfer_account_id?: string | null;
            /** @description Whether or not the payee has been deleted.  Deleted payees will only be included in delta requests. */
            deleted: boolean;
        };
        PayeeLocationsResponse: {
            data: {
                payee_locations: components["schemas"]["PayeeLocation"][];
            };
        };
        PayeeLocationResponse: {
            data: {
                payee_location: components["schemas"]["PayeeLocation"];
            };
        };
        PayeeLocation: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            payee_id: string;
            latitude: string;
            longitude: string;
            /** @description Whether or not the payee location has been deleted.  Deleted payee locations will only be included in delta requests. */
            deleted: boolean;
        };
        TransactionsResponse: {
            data: {
                transactions: components["schemas"]["TransactionDetail"][];
                /**
                 * Format: int64
                 * @description The knowledge of the server
                 */
                server_knowledge: number;
            };
        };
        HybridTransactionsResponse: {
            data: {
                transactions: components["schemas"]["HybridTransaction"][];
                /**
                 * Format: int64
                 * @description The knowledge of the server
                 */
                server_knowledge?: number;
            };
        };
        PutTransactionWrapper: {
            transaction: components["schemas"]["ExistingTransaction"];
        };
        PostTransactionsWrapper: {
            transaction?: components["schemas"]["NewTransaction"];
            transactions?: components["schemas"]["NewTransaction"][];
        };
        PatchTransactionsWrapper: {
            transactions: components["schemas"]["SaveTransactionWithIdOrImportId"][];
        };
        ExistingTransaction: Record<string, never> & components["schemas"]["SaveTransactionWithOptionalFields"];
        NewTransaction: components["schemas"]["SaveTransactionWithOptionalFields"] & {
            /** @description If specified, a new transaction will be assigned this `import_id` and considered "imported".  We will also attempt to match this imported transaction to an existing "user-entered" transaction on the same account, with the same amount, and with a date +/-10 days from the imported transaction date.<br><br>Transactions imported through File Based Import or Direct Import (not through the API) are assigned an import_id in the format: 'YNAB:[milliunit_amount]:[iso_date]:[occurrence]'. For example, a transaction dated 2015-12-30 in the amount of -$294.23 USD would have an import_id of 'YNAB:-294230:2015-12-30:1'.  If a second transaction on the same account was imported and had the same date and same amount, its import_id would be 'YNAB:-294230:2015-12-30:2'.  Using a consistent format will prevent duplicates through Direct Import and File Based Import.<br><br>If import_id is omitted or specified as null, the transaction will be treated as a "user-entered" transaction. As such, it will be eligible to be matched against transactions later being imported (via DI, FBI, or API). */
            import_id?: string | null;
        };
        SaveTransactionWithIdOrImportId: {
            /** @description If specified, this id will be used to lookup a transaction by its `id` for the purpose of updating the transaction itself. If not specified, an `import_id` should be supplied. */
            id?: string | null;
            /** @description If specified, this id will be used to lookup a transaction by its `import_id` for the purpose of updating the transaction itself. If not specified, an `id` should be supplied.  You may not provide both an `id` and an `import_id` and updating an `import_id` on an existing transaction is not allowed. */
            import_id?: string | null;
        } & components["schemas"]["SaveTransactionWithOptionalFields"];
        SaveTransactionWithOptionalFields: {
            /** Format: uuid */
            account_id?: string;
            /**
             * Format: date
             * @description The transaction date in ISO format (e.g. 2016-12-01).  Future dates (scheduled transactions) are not permitted.  Split transaction dates cannot be changed and if a different date is supplied it will be ignored.
             */
            date?: string;
            /**
             * Format: int64
             * @description The transaction amount in milliunits format.  Split transaction amounts cannot be changed and if a different amount is supplied it will be ignored.
             */
            amount?: number;
            /**
             * Format: uuid
             * @description The payee for the transaction.  To create a transfer between two accounts, use the account transfer payee pointing to the target account.  Account transfer payees are specified as `transfer_payee_id` on the account resource.
             */
            payee_id?: string | null;
            /** @description The payee name.  If a `payee_name` value is provided and `payee_id` has a null value, the `payee_name` value will be used to resolve the payee by either (1) a matching payee rename rule (only if `import_id` is also specified) or (2) a payee with the same name or (3) creation of a new payee. */
            payee_name?: string | null;
            /**
             * Format: uuid
             * @description The category for the transaction.  To configure a split transaction, you can specify null for `category_id` and provide a `subtransactions` array as part of the transaction object.  If an existing transaction is a split, the `category_id` cannot be changed.  Credit Card Payment categories are not permitted and will be ignored if supplied.
             */
            category_id?: string | null;
            memo?: string | null;
            cleared?: components["schemas"]["TransactionClearedStatus"];
            /** @description Whether or not the transaction is approved.  If not supplied, transaction will be unapproved by default. */
            approved?: boolean;
            flag_color?: components["schemas"]["TransactionFlagColor"];
            /** @description An array of subtransactions to configure a transaction as a split. Updating `subtransactions` on an existing split transaction is not supported. */
            subtransactions?: components["schemas"]["SaveSubTransaction"][];
        };
        SaveSubTransaction: {
            /**
             * Format: int64
             * @description The subtransaction amount in milliunits format.
             */
            amount: number;
            /**
             * Format: uuid
             * @description The payee for the subtransaction.
             */
            payee_id?: string | null;
            /** @description The payee name.  If a `payee_name` value is provided and `payee_id` has a null value, the `payee_name` value will be used to resolve the payee by either (1) a matching payee rename rule (only if import_id is also specified on parent transaction) or (2) a payee with the same name or (3) creation of a new payee. */
            payee_name?: string | null;
            /**
             * Format: uuid
             * @description The category for the subtransaction.  Credit Card Payment categories are not permitted and will be ignored if supplied.
             */
            category_id?: string | null;
            memo?: string | null;
        };
        SaveTransactionsResponse: {
            data: {
                /** @description The transaction ids that were saved */
                transaction_ids: string[];
                transaction?: components["schemas"]["TransactionDetail"];
                /** @description If multiple transactions were specified, the transactions that were saved */
                transactions?: components["schemas"]["TransactionDetail"][];
                /** @description If multiple transactions were specified, a list of import_ids that were not created because of an existing `import_id` found on the same account */
                duplicate_import_ids?: string[];
                /**
                 * Format: int64
                 * @description The knowledge of the server
                 */
                server_knowledge: number;
            };
        };
        TransactionResponse: {
            data: {
                transaction: components["schemas"]["TransactionDetail"];
            };
        };
        TransactionSummary: {
            id: string;
            /**
             * Format: date
             * @description The transaction date in ISO format (e.g. 2016-12-01)
             */
            date: string;
            /**
             * Format: int64
             * @description The transaction amount in milliunits format
             */
            amount: number;
            memo?: string | null;
            cleared: components["schemas"]["TransactionClearedStatus"];
            /** @description Whether or not the transaction is approved */
            approved: boolean;
            flag_color?: components["schemas"]["TransactionFlagColor"];
            flag_name?: components["schemas"]["TransactionFlagName"];
            /** Format: uuid */
            account_id: string;
            /** Format: uuid */
            payee_id?: string | null;
            /** Format: uuid */
            category_id?: string | null;
            /**
             * Format: uuid
             * @description If a transfer transaction, the account to which it transfers
             */
            transfer_account_id?: string | null;
            /** @description If a transfer transaction, the id of transaction on the other side of the transfer */
            transfer_transaction_id?: string | null;
            /** @description If transaction is matched, the id of the matched transaction */
            matched_transaction_id?: string | null;
            /** @description If the transaction was imported, this field is a unique (by account) import identifier.  If this transaction was imported through File Based Import or Direct Import and not through the API, the import_id will have the format: 'YNAB:[milliunit_amount]:[iso_date]:[occurrence]'.  For example, a transaction dated 2015-12-30 in the amount of -$294.23 USD would have an import_id of 'YNAB:-294230:2015-12-30:1'.  If a second transaction on the same account was imported and had the same date and same amount, its import_id would be 'YNAB:-294230:2015-12-30:2'. */
            import_id?: string | null;
            /** @description If the transaction was imported, the payee name that was used when importing and before applying any payee rename rules */
            import_payee_name?: string | null;
            /** @description If the transaction was imported, the original payee name as it appeared on the statement */
            import_payee_name_original?: string | null;
            /**
             * @description If the transaction is a debt/loan account transaction, the type of transaction
             * @enum {string|null}
             */
            debt_transaction_type?: "payment" | "refund" | "fee" | "interest" | "escrow" | "balanceAdjustment" | "credit" | "charge" | null;
            /** @description Whether or not the transaction has been deleted.  Deleted transactions will only be included in delta requests. */
            deleted: boolean;
        };
        TransactionDetail: components["schemas"]["TransactionSummary"] & {
            account_name: string;
            payee_name?: string | null;
            /** @description The name of the category.  If a split transaction, this will be 'Split'. */
            category_name?: string | null;
            /** @description If a split transaction, the subtransactions. */
            subtransactions: components["schemas"]["SubTransaction"][];
        };
        HybridTransaction: components["schemas"]["TransactionSummary"] & {
            /**
             * @description Whether the hybrid transaction represents a regular transaction or a subtransaction
             * @enum {string}
             */
            type: "transaction" | "subtransaction";
            /** @description For subtransaction types, this is the id of the parent transaction.  For transaction types, this id will be always be null. */
            parent_transaction_id?: string | null;
            account_name: string;
            payee_name?: string | null;
            /** @description The name of the category.  If a split transaction, this will be 'Split'. */
            category_name?: string;
        };
        PatchPayeeWrapper: {
            payee: components["schemas"]["SavePayee"];
        };
        SavePayee: {
            /** @description The name of the payee. The name must be a maximum of 500 characters. */
            name?: string;
        };
        PatchCategoryWrapper: {
            category: components["schemas"]["SaveCategory"];
        };
        SaveCategory: {
            name?: string | null;
            note?: string | null;
            /** Format: uuid */
            category_group_id?: string;
        };
        PatchMonthCategoryWrapper: {
            category: components["schemas"]["SaveMonthCategory"];
        };
        SaveMonthCategory: {
            /**
             * Format: int64
             * @description Budgeted amount in milliunits format
             */
            budgeted: number;
        };
        TransactionsImportResponse: {
            data: {
                /** @description The list of transaction ids that were imported. */
                transaction_ids: string[];
            };
        };
        BulkResponse: {
            data: {
                bulk: {
                    /** @description The list of Transaction ids that were created. */
                    transaction_ids: string[];
                    /** @description If any Transactions were not created because they had an `import_id` matching a transaction already on the same account, the specified import_id(s) will be included in this list. */
                    duplicate_import_ids: string[];
                };
            };
        };
        BulkTransactions: {
            transactions: components["schemas"]["SaveTransactionWithOptionalFields"][];
        };
        SubTransaction: {
            id: string;
            transaction_id: string;
            /**
             * Format: int64
             * @description The subtransaction amount in milliunits format
             */
            amount: number;
            memo?: string | null;
            /** Format: uuid */
            payee_id?: string | null;
            payee_name?: string | null;
            /** Format: uuid */
            category_id?: string | null;
            category_name?: string | null;
            /**
             * Format: uuid
             * @description If a transfer, the account_id which the subtransaction transfers to
             */
            transfer_account_id?: string | null;
            /** @description If a transfer, the id of transaction on the other side of the transfer */
            transfer_transaction_id?: string | null;
            /** @description Whether or not the subtransaction has been deleted.  Deleted subtransactions will only be included in delta requests. */
            deleted: boolean;
        };
        ScheduledTransactionsResponse: {
            data: {
                scheduled_transactions: components["schemas"]["ScheduledTransactionDetail"][];
                /**
                 * Format: int64
                 * @description The knowledge of the server
                 */
                server_knowledge: number;
            };
        };
        ScheduledTransactionResponse: {
            data: {
                scheduled_transaction: components["schemas"]["ScheduledTransactionDetail"];
            };
        };
        PostScheduledTransactionWrapper: {
            scheduled_transaction: components["schemas"]["SaveScheduledTransaction"];
        };
        SaveScheduledTransaction: {
            /** Format: uuid */
            account_id: string;
            /**
             * Format: date
             * @description The scheduled transaction date in ISO format (e.g. 2016-12-01).  This should be a future date no more than 5 years into the future.
             */
            date: string;
            /**
             * Format: int64
             * @description The scheduled transaction amount in milliunits format.
             */
            amount?: number;
            /**
             * Format: uuid
             * @description The payee for the scheduled transaction.  To create a transfer between two accounts, use the account transfer payee pointing to the target account.  Account transfer payees are specified as `transfer_payee_id` on the account resource.
             */
            payee_id?: string | null;
            /** @description The payee name for the the scheduled transaction.  If a `payee_name` value is provided and `payee_id` has a null value, the `payee_name` value will be used to resolve the payee by either (1) a payee with the same name or (2) creation of a new payee. */
            payee_name?: string | null;
            /**
             * Format: uuid
             * @description The category for the scheduled transaction. Credit Card Payment categories are not permitted. Creating a split scheduled transaction is not currently supported.
             */
            category_id?: string | null;
            memo?: string | null;
            flag_color?: components["schemas"]["TransactionFlagColor"];
            frequency?: components["schemas"]["ScheduledTransactionFrequency"];
        };
        ScheduledTransactionSummary: {
            /** Format: uuid */
            id: string;
            /**
             * Format: date
             * @description The first date for which the Scheduled Transaction was scheduled.
             */
            date_first: string;
            /**
             * Format: date
             * @description The next date for which the Scheduled Transaction is scheduled.
             */
            date_next: string;
            /** @enum {string} */
            frequency: "never" | "daily" | "weekly" | "everyOtherWeek" | "twiceAMonth" | "every4Weeks" | "monthly" | "everyOtherMonth" | "every3Months" | "every4Months" | "twiceAYear" | "yearly" | "everyOtherYear";
            /**
             * Format: int64
             * @description The scheduled transaction amount in milliunits format
             */
            amount: number;
            memo?: string | null;
            flag_color?: components["schemas"]["TransactionFlagColor"];
            flag_name?: components["schemas"]["TransactionFlagName"];
            /** Format: uuid */
            account_id: string;
            /** Format: uuid */
            payee_id?: string | null;
            /** Format: uuid */
            category_id?: string | null;
            /**
             * Format: uuid
             * @description If a transfer, the account_id which the scheduled transaction transfers to
             */
            transfer_account_id?: string | null;
            /** @description Whether or not the scheduled transaction has been deleted.  Deleted scheduled transactions will only be included in delta requests. */
            deleted: boolean;
        };
        ScheduledTransactionDetail: components["schemas"]["ScheduledTransactionSummary"] & {
            account_name: string;
            payee_name?: string | null;
            /** @description The name of the category.  If a split scheduled transaction, this will be 'Split'. */
            category_name?: string | null;
            /** @description If a split scheduled transaction, the subtransactions. */
            subtransactions: components["schemas"]["ScheduledSubTransaction"][];
        };
        ScheduledSubTransaction: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            scheduled_transaction_id: string;
            /**
             * Format: int64
             * @description The scheduled subtransaction amount in milliunits format
             */
            amount: number;
            memo?: string | null;
            /** Format: uuid */
            payee_id?: string | null;
            /** Format: uuid */
            category_id?: string | null;
            /**
             * Format: uuid
             * @description If a transfer, the account_id which the scheduled subtransaction transfers to
             */
            transfer_account_id?: string | null;
            /** @description Whether or not the scheduled subtransaction has been deleted. Deleted scheduled subtransactions will only be included in delta requests. */
            deleted: boolean;
        };
        MonthSummariesResponse: {
            data: {
                months: components["schemas"]["MonthSummary"][];
                /**
                 * Format: int64
                 * @description The knowledge of the server
                 */
                server_knowledge: number;
            };
        };
        MonthDetailResponse: {
            data: {
                month: components["schemas"]["MonthDetail"];
            };
        };
        MonthSummary: {
            /** Format: date */
            month: string;
            note?: string | null;
            /**
             * Format: int64
             * @description The total amount of transactions categorized to 'Inflow: Ready to Assign' in the month
             */
            income: number;
            /**
             * Format: int64
             * @description The total amount budgeted in the month
             */
            budgeted: number;
            /**
             * Format: int64
             * @description The total amount of transactions in the month, excluding those categorized to 'Inflow: Ready to Assign'
             */
            activity: number;
            /**
             * Format: int64
             * @description The available amount for 'Ready to Assign'
             */
            to_be_budgeted: number;
            /**
             * Format: int32
             * @description The Age of Money as of the month
             */
            age_of_money?: number | null;
            /** @description Whether or not the month has been deleted.  Deleted months will only be included in delta requests. */
            deleted: boolean;
        };
        MonthDetail: components["schemas"]["MonthSummary"] & {
            /** @description The budget month categories.  Amounts (budgeted, activity, balance, etc.) are specific to the {month} parameter specified. */
            categories: components["schemas"]["Category"][];
        };
        /**
         * @description The transaction flag
         * @enum {string|null}
         */
        TransactionFlagColor: "red" | "orange" | "yellow" | "green" | "blue" | "purple" | null;
        /** @description The customized name of a transaction flag */
        TransactionFlagName: string | null;
        /**
         * @description The cleared status of the transaction
         * @enum {string}
         */
        TransactionClearedStatus: "cleared" | "uncleared" | "reconciled";
        /**
         * @description The scheduled transaction frequency
         * @enum {string}
         */
        ScheduledTransactionFrequency: "never" | "daily" | "weekly" | "everyOtherWeek" | "twiceAMonth" | "every4Weeks" | "monthly" | "everyOtherMonth" | "every3Months" | "every4Months" | "twiceAYear" | "yearly" | "everyOtherYear";
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type SchemaErrorResponse = components['schemas']['ErrorResponse'];
export type SchemaErrorDetail = components['schemas']['ErrorDetail'];
export type SchemaUserResponse = components['schemas']['UserResponse'];
export type SchemaUser = components['schemas']['User'];
export type SchemaDateFormat = components['schemas']['DateFormat'];
export type SchemaCurrencyFormat = components['schemas']['CurrencyFormat'];
export type SchemaBudgetSummaryResponse = components['schemas']['BudgetSummaryResponse'];
export type SchemaBudgetSummary = components['schemas']['BudgetSummary'];
export type SchemaBudgetDetailResponse = components['schemas']['BudgetDetailResponse'];
export type SchemaBudgetDetail = components['schemas']['BudgetDetail'];
export type SchemaBudgetSettingsResponse = components['schemas']['BudgetSettingsResponse'];
export type SchemaBudgetSettings = components['schemas']['BudgetSettings'];
export type SchemaAccountsResponse = components['schemas']['AccountsResponse'];
export type SchemaAccountResponse = components['schemas']['AccountResponse'];
export type SchemaAccount = components['schemas']['Account'];
export type SchemaPostAccountWrapper = components['schemas']['PostAccountWrapper'];
export type SchemaSaveAccount = components['schemas']['SaveAccount'];
export type SchemaLoanAccountPeriodicValue = components['schemas']['LoanAccountPeriodicValue'];
export type SchemaAccountType = components['schemas']['AccountType'];
export type SchemaCategoriesResponse = components['schemas']['CategoriesResponse'];
export type SchemaCategoryResponse = components['schemas']['CategoryResponse'];
export type SchemaCategoryGroupWithCategories = components['schemas']['CategoryGroupWithCategories'];
export type SchemaCategoryGroup = components['schemas']['CategoryGroup'];
export type SchemaCategory = components['schemas']['Category'];
export type SchemaSaveCategoryResponse = components['schemas']['SaveCategoryResponse'];
export type SchemaPayeesResponse = components['schemas']['PayeesResponse'];
export type SchemaPayeeResponse = components['schemas']['PayeeResponse'];
export type SchemaSavePayeeResponse = components['schemas']['SavePayeeResponse'];
export type SchemaPayee = components['schemas']['Payee'];
export type SchemaPayeeLocationsResponse = components['schemas']['PayeeLocationsResponse'];
export type SchemaPayeeLocationResponse = components['schemas']['PayeeLocationResponse'];
export type SchemaPayeeLocation = components['schemas']['PayeeLocation'];
export type SchemaTransactionsResponse = components['schemas']['TransactionsResponse'];
export type SchemaHybridTransactionsResponse = components['schemas']['HybridTransactionsResponse'];
export type SchemaPutTransactionWrapper = components['schemas']['PutTransactionWrapper'];
export type SchemaPostTransactionsWrapper = components['schemas']['PostTransactionsWrapper'];
export type SchemaPatchTransactionsWrapper = components['schemas']['PatchTransactionsWrapper'];
export type SchemaExistingTransaction = components['schemas']['ExistingTransaction'];
export type SchemaNewTransaction = components['schemas']['NewTransaction'];
export type SchemaSaveTransactionWithIdOrImportId = components['schemas']['SaveTransactionWithIdOrImportId'];
export type SchemaSaveTransactionWithOptionalFields = components['schemas']['SaveTransactionWithOptionalFields'];
export type SchemaSaveSubTransaction = components['schemas']['SaveSubTransaction'];
export type SchemaSaveTransactionsResponse = components['schemas']['SaveTransactionsResponse'];
export type SchemaTransactionResponse = components['schemas']['TransactionResponse'];
export type SchemaTransactionSummary = components['schemas']['TransactionSummary'];
export type SchemaTransactionDetail = components['schemas']['TransactionDetail'];
export type SchemaHybridTransaction = components['schemas']['HybridTransaction'];
export type SchemaPatchPayeeWrapper = components['schemas']['PatchPayeeWrapper'];
export type SchemaSavePayee = components['schemas']['SavePayee'];
export type SchemaPatchCategoryWrapper = components['schemas']['PatchCategoryWrapper'];
export type SchemaSaveCategory = components['schemas']['SaveCategory'];
export type SchemaPatchMonthCategoryWrapper = components['schemas']['PatchMonthCategoryWrapper'];
export type SchemaSaveMonthCategory = components['schemas']['SaveMonthCategory'];
export type SchemaTransactionsImportResponse = components['schemas']['TransactionsImportResponse'];
export type SchemaBulkResponse = components['schemas']['BulkResponse'];
export type SchemaBulkTransactions = components['schemas']['BulkTransactions'];
export type SchemaSubTransaction = components['schemas']['SubTransaction'];
export type SchemaScheduledTransactionsResponse = components['schemas']['ScheduledTransactionsResponse'];
export type SchemaScheduledTransactionResponse = components['schemas']['ScheduledTransactionResponse'];
export type SchemaPostScheduledTransactionWrapper = components['schemas']['PostScheduledTransactionWrapper'];
export type SchemaSaveScheduledTransaction = components['schemas']['SaveScheduledTransaction'];
export type SchemaScheduledTransactionSummary = components['schemas']['ScheduledTransactionSummary'];
export type SchemaScheduledTransactionDetail = components['schemas']['ScheduledTransactionDetail'];
export type SchemaScheduledSubTransaction = components['schemas']['ScheduledSubTransaction'];
export type SchemaMonthSummariesResponse = components['schemas']['MonthSummariesResponse'];
export type SchemaMonthDetailResponse = components['schemas']['MonthDetailResponse'];
export type SchemaMonthSummary = components['schemas']['MonthSummary'];
export type SchemaMonthDetail = components['schemas']['MonthDetail'];
export type SchemaTransactionFlagColor = components['schemas']['TransactionFlagColor'];
export type SchemaTransactionFlagName = components['schemas']['TransactionFlagName'];
export type SchemaTransactionClearedStatus = components['schemas']['TransactionClearedStatus'];
export type SchemaScheduledTransactionFrequency = components['schemas']['ScheduledTransactionFrequency'];
export type $defs = Record<string, never>;
export interface operations {
    getUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The user info */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponse"];
                };
            };
            /** @description An error occurred */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getBudgets: {
        parameters: {
            query?: {
                /** @description Whether to include the list of budget accounts */
                include_accounts?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of budgets */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BudgetSummaryResponse"];
                };
            };
            /** @description No budgets were found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description An error occurred */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getBudgetById: {
        parameters: {
            query?: {
                /** @description The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included. */
                last_knowledge_of_server?: number;
            };
            header?: never;
            path: {
                /** @description The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). */
                budget_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The requested budget */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BudgetDetailResponse"];
                };
            };
            /** @description The specified budget was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description An error occurred */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getBudgetSettingsById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). */
                budget_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The requested budget settings */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BudgetSettingsResponse"];
                };
            };
            /** @description The specified Budget was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description An error occurred */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getAccounts: {
        parameters: {
            query?: {
                /** @description The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included. */
                last_knowledge_of_server?: number;
            };
            header?: never;
            path: {
                /** @description The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). */
                budget_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of requested accounts */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountsResponse"];
                };
            };
            /** @description No accounts were found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description An error occurred */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createAccount: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id of the budget ("last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget) */
                budget_id: string;
            };
            cookie?: never;
        };
        /** @description The account to create. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostAccountWrapper"];
            };
        };
        responses: {
            /** @description The account was successfully created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountResponse"];
                };
            };
            /** @description The request could not be understood due to malformed syntax or validation error(s). */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getAccountById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). */
                budget_id: string;
                /** @description The id of the account */
                account_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The requested account */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountResponse"];
                };
            };
            /** @description The requested account was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description An error occurred */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getCategories: {
        parameters: {
            query?: {
                /** @description The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included. */
                last_knowledge_of_server?: number;
            };
            header?: never;
            path: {
                /** @description The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). */
                budget_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The categories grouped by category group */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CategoriesResponse"];
                };
            };
            /** @description No categories were found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description An error occurred */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getCategoryById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). */
                budget_id: string;
                /** @description The id of the category */
                category_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The requested category */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CategoryResponse"];
                };
            };
            /** @description The category not was found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description An error occurred */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    updateCategory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). */
                budget_id: string;
                /** @description The id of the category */
                category_id: string;
            };
            cookie?: never;
        };
        /** @description The category to update */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PatchCategoryWrapper"];
            };
        };
        responses: {
            /** @description The category was successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SaveCategoryResponse"];
                };
            };
            /** @description The request could not be understood due to malformed syntax or validation error(s) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getMonthCategoryById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). */
                budget_id: string;
                /** @description The budget month in ISO format (e.g. 2016-12-01) ("current" can also be used to specify the current calendar month (UTC)) */
                month: string;
                /** @description The id of the category */
                category_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The requested month category */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CategoryResponse"];
                };
            };
            /** @description The month category was not was found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description An error occurred */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    updateMonthCategory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). */
                budget_id: string;
                /** @description The budget month in ISO format (e.g. 2016-12-01) ("current" can also be used to specify the current calendar month (UTC)) */
                month: string;
                /** @description The id of the category */
                category_id: string;
            };
            cookie?: never;
        };
        /** @description The category to update.  Only `budgeted` amount can be updated and any other fields specified will be ignored. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PatchMonthCategoryWrapper"];
            };
        };
        responses: {
            /** @description The month category was successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SaveCategoryResponse"];
                };
            };
            /** @description The request could not be understood due to malformed syntax or validation error(s) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getPayees: {
        parameters: {
            query?: {
                /** @description The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included. */
                last_knowledge_of_server?: number;
            };
            header?: never;
            path: {
                /** @description The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). */
                budget_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The requested list of payees */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PayeesResponse"];
                };
            };
            /** @description No payees were found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description An error occurred */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getPayeeById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). */
                budget_id: string;
                /** @description The id of the payee */
                payee_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The requested payee */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PayeeResponse"];
                };
            };
            /** @description The payee was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description An error occurred */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    updatePayee: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). */
                budget_id: string;
                /** @description The id of the payee */
                payee_id: string;
            };
            cookie?: never;
        };
        /** @description The payee to update */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PatchPayeeWrapper"];
            };
        };
        responses: {
            /** @description The payee was successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SavePayeeResponse"];
                };
            };
            /** @description The request could not be understood due to malformed syntax or validation error(s) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getPayeeLocations: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). */
                budget_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of payee locations */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PayeeLocationsResponse"];
                };
            };
            /** @description No payees locations were found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description An error occurred */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getPayeeLocationById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). */
                budget_id: string;
                /** @description id of payee location */
                payee_location_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The payee location */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PayeeLocationResponse"];
                };
            };
            /** @description The payee location was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description An error occurred */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getPayeeLocationsByPayee: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). */
                budget_id: string;
                /** @description id of payee */
                payee_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of requested payee locations */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PayeeLocationsResponse"];
                };
            };
            /** @description No payees locations were found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description An error occurred */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getBudgetMonths: {
        parameters: {
            query?: {
                /** @description The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included. */
                last_knowledge_of_server?: number;
            };
            header?: never;
            path: {
                /** @description The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). */
                budget_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of budget months */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MonthSummariesResponse"];
                };
            };
            /** @description No budget months were found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description An error occurred */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getBudgetMonth: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). */
                budget_id: string;
                /** @description The budget month in ISO format (e.g. 2016-12-01) ("current" can also be used to specify the current calendar month (UTC)) */
                month: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The budget month detail */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MonthDetailResponse"];
                };
            };
            /** @description The budget month was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description An error occurred */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getTransactions: {
        parameters: {
            query?: {
                /** @description If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30). */
                since_date?: string;
                /** @description If specified, only transactions of the specified type will be included. "uncategorized" and "unapproved" are currently supported. */
                type?: "uncategorized" | "unapproved";
                /** @description The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included. */
                last_knowledge_of_server?: number;
            };
            header?: never;
            path: {
                /** @description The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). */
                budget_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of requested transactions */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TransactionsResponse"];
                };
            };
            /** @description An error occurred */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description No transactions were found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createTransaction: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). */
                budget_id: string;
            };
            cookie?: never;
        };
        /** @description The transaction or transactions to create.  To create a single transaction you can specify a value for the `transaction` object and to create multiple transactions you can specify an array of `transactions`.  It is expected that you will only provide a value for one of these objects. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostTransactionsWrapper"];
            };
        };
        responses: {
            /** @description The transaction or transactions were successfully created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SaveTransactionsResponse"];
                };
            };
            /** @description The request could not be understood due to malformed syntax or validation error(s). */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description A transaction on the same account with the same `import_id` already exists. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    updateTransactions: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). */
                budget_id: string;
            };
            cookie?: never;
        };
        /** @description The transactions to update. Each transaction must have either an `id` or `import_id` specified. If `id` is specified as null an `import_id` value can be provided which will allow transaction(s) to be updated by its `import_id`. If an `id` is specified, it will always be used for lookup.  You should not specify both `id` and `import_id`.  Updating an `import_id` on an existing transaction is not allowed; if an `import_id` is specified, it will only be used to lookup the transaction. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PatchTransactionsWrapper"];
            };
        };
        responses: {
            /** @description The transactions were successfully updated */
            209: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SaveTransactionsResponse"];
                };
            };
            /** @description The request could not be understood due to malformed syntax or validation error(s). */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    importTransactions: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). */
                budget_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request was successful but there were no transactions to import */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TransactionsImportResponse"];
                };
            };
            /** @description One or more transactions were imported successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TransactionsImportResponse"];
                };
            };
            /** @description The request could not be understood due to malformed syntax or validation error(s) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getTransactionById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). */
                budget_id: string;
                /** @description The id of the transaction */
                transaction_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The requested transaction */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TransactionResponse"];
                };
            };
            /** @description The transaction was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description An error occurred */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    updateTransaction: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). */
                budget_id: string;
                /** @description The id of the transaction */
                transaction_id: string;
            };
            cookie?: never;
        };
        /** @description The transaction to update */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PutTransactionWrapper"];
            };
        };
        responses: {
            /** @description The transaction was successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TransactionResponse"];
                };
            };
            /** @description The request could not be understood due to malformed syntax or validation error(s) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteTransaction: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). */
                budget_id: string;
                /** @description The id of the transaction */
                transaction_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The transaction was successfully deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TransactionResponse"];
                };
            };
            /** @description The transaction was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getTransactionsByAccount: {
        parameters: {
            query?: {
                /** @description If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30). */
                since_date?: string;
                /** @description If specified, only transactions of the specified type will be included. "uncategorized" and "unapproved" are currently supported. */
                type?: "uncategorized" | "unapproved";
                /** @description The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included. */
                last_knowledge_of_server?: number;
            };
            header?: never;
            path: {
                /** @description The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). */
                budget_id: string;
                /** @description The id of the account */
                account_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of requested transactions */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TransactionsResponse"];
                };
            };
            /** @description No transactions were found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description An error occurred */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getTransactionsByCategory: {
        parameters: {
            query?: {
                /** @description If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30). */
                since_date?: string;
                /** @description If specified, only transactions of the specified type will be included. "uncategorized" and "unapproved" are currently supported. */
                type?: "uncategorized" | "unapproved";
                /** @description The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included. */
                last_knowledge_of_server?: number;
            };
            header?: never;
            path: {
                /** @description The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). */
                budget_id: string;
                /** @description The id of the category */
                category_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of requested transactions */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HybridTransactionsResponse"];
                };
            };
            /** @description No transactions were found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description An error occurred */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getTransactionsByPayee: {
        parameters: {
            query?: {
                /** @description If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30). */
                since_date?: string;
                /** @description If specified, only transactions of the specified type will be included. "uncategorized" and "unapproved" are currently supported. */
                type?: "uncategorized" | "unapproved";
                /** @description The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included. */
                last_knowledge_of_server?: number;
            };
            header?: never;
            path: {
                /** @description The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). */
                budget_id: string;
                /** @description The id of the payee */
                payee_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of requested transactions */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HybridTransactionsResponse"];
                };
            };
            /** @description No transactions were found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description An error occurred */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getTransactionsByMonth: {
        parameters: {
            query?: {
                /** @description If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30). */
                since_date?: string;
                /** @description If specified, only transactions of the specified type will be included. "uncategorized" and "unapproved" are currently supported. */
                type?: "uncategorized" | "unapproved";
                /** @description The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included. */
                last_knowledge_of_server?: number;
            };
            header?: never;
            path: {
                /** @description The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). */
                budget_id: string;
                /** @description The budget month in ISO format (e.g. 2016-12-01) ("current" can also be used to specify the current calendar month (UTC)) */
                month: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of requested transactions */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HybridTransactionsResponse"];
                };
            };
            /** @description No transactions were found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description An error occurred */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getScheduledTransactions: {
        parameters: {
            query?: {
                /** @description The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included. */
                last_knowledge_of_server?: number;
            };
            header?: never;
            path: {
                /** @description The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). */
                budget_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of requested scheduled transactions */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScheduledTransactionsResponse"];
                };
            };
            /** @description No scheduled transactions were found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description An error occurred */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createScheduledTransaction: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). */
                budget_id: string;
            };
            cookie?: never;
        };
        /** @description The scheduled transaction to create */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostScheduledTransactionWrapper"];
            };
        };
        responses: {
            /** @description The scheduled transaction was successfully created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScheduledTransactionResponse"];
                };
            };
            /** @description The request could not be understood due to malformed syntax or validation error(s). */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getScheduledTransactionById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). */
                budget_id: string;
                /** @description The id of the scheduled transaction */
                scheduled_transaction_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The requested Scheduled Transaction */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScheduledTransactionResponse"];
                };
            };
            /** @description The scheduled transaction was not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description An error occurred */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
}
